---
description: 
globs: 
alwaysApply: false
---
# Swift 项目开发规则

## 代码风格规范

### 基本原则
- 始终遵循 Swift 官方代码风格指南
- 使用 SwiftLint 工具确保代码符合规范
- 优先使用 `let` 代替 `var`，默认声明为常量
- 优先使用 `struct` 代替 `class`，除非需要引用语义

### 异步操作
- 使用 `async/await` 处理异步操作，避免嵌套回调
- 合理使用 `Task` 和 `TaskGroup` 进行并发处理
- 避免使用传统的 completion handlers，除非与旧代码兼容

### 文档注释
- 为所有公共 API 编写文档注释，使用 `///` 格式
- 包含参数说明、返回值说明和使用示例
- 对复杂的业务逻辑添加详细注释

### 代码质量
- 配置 `.swiftlint.yml` 文件，确保代码质量
- 使用 `typealias` 简化复杂的闭包类型签名
- 避免强制解包，优先使用可选绑定和 nil 合并操作符

## 架构设计

### 业务逻辑分离
- 将业务逻辑从 UI 代码中分离
- 使用 MVC、MVVM 或 Clean Architecture 模式
- 创建独立的 Service 层处理网络请求和数据处理

### 依赖注入
- 通过协议和构造函数注入管理依赖
- 使用协议导向编程提高可测试性
- 避免单例模式，优先使用依赖注入

### SOLID 原则
- 单一职责原则：每个类/结构体只负责一个功能
- 开闭原则：对扩展开放，对修改关闭
- 里氏替换原则：子类应该能够替换其基类
- 接口隔离原则：使用小而专一的协议
- 依赖倒置原则：依赖于抽象，不依赖于具体实现

## 项目结构

### 文件组织
- Models：数据模型和实体类
- Services：网络服务和数据处理
- ViewModels：视图模型和业务逻辑
- Utilities：工具类和扩展
- Resources：资源文件和常量

### 字符串管理
- 使用 `Localizable.strings` 进行国际化
- 创建 `StringConstants` 结构体集中管理字符串常量
- 避免硬编码字符串

### 蓝牙功能
- 使用 `CoreBluetooth` 框架处理蓝牙功能
- 创建专门的 `BluetoothManager` 类管理蓝牙连接
- 实现适当的错误处理和状态管理

## 数据共享

### 跨组件通信
- 使用 `Combine` 框架进行响应式编程
- 使用 `NotificationCenter` 进行松耦合的消息传递
- 创建 `ObservableObject` 类进行状态管理

### 数据持久化
- 使用 Core Data 进行复杂数据持久化
- 使用 `UserDefaults` 存储简单的用户偏好
- 考虑使用 `FileManager` 进行文件操作

## 性能优化

### 内存管理
- 正确使用 `weak` 和 `unowned` 避免循环引用
- 在闭包中使用 `[weak self]` 或 `[unowned self]`
- 及时释放不需要的资源

### 代码优化
- 使用 `lazy` 属性延迟初始化
- 合理使用 `@escaping` 和 `@autoclosure`
- 避免在主线程执行耗时操作

## 调试和测试

### 调试工具
- 使用 Xcode 的断点和 LLDB 调试工具
- 配置 Debug 和 Release 构建配置
- 使用 Instruments 进行性能分析

### 单元测试
- 为业务逻辑编写单元测试
- 使用 `XCTest` 框架
- 保持测试代码的可读性和维护性

## 错误处理

### 错误类型
- 创建自定义错误类型实现 `Error` 协议
- 使用 `Result` 类型处理可能失败的操作
- 提供有意义的错误消息

### 异常处理
- 使用 `do-catch` 语句处理异常
- 在适当的地方使用 `try?` 和 `try!`
- 记录错误日志便于调试

## 代码改进规则

### 通用改进
1. 分析已有代码潜在的bug，指出待改进的地方
2. 修改代码提高可读性，减少判断嵌套
3. 检查变量命名和单词拼写
4. 自动添加注释
5. 将大方法拆分为功能更加单一的多个子方法
6. 使用自然语言翻译代码逻辑

### Swift 特定改进
- 使用 `guard` 语句进行早期退出
- 优化可选值处理，避免强制解包
- 使用扩展 (Extension) 组织代码
- 合理使用泛型提高代码复用性
- 使用 `@discardableResult` 标记可忽略返回值的方法

## 项目配置

### 开发环境
- 启用 Xcode 的自动导入功能
- 配置 SwiftLint 构建阶段
- 设置适当的警告级别

### 版本控制
- 使用有意义的提交消息
- 定期进行代码审查
- 保持分支策略的一致性
